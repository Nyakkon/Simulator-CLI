import argparse
import os
import xml.etree.ElementTree as ET
import winreg
import re
import configparser

def load_command_descriptions():
    """Đọc các định nghĩa lệnh từ tệp C:/Windows/Software/QORE/env/cnf.ini"""
    config = configparser.ConfigParser()
    cnf_path = r'C:\Windows\Software\QORE\env\cnf.ini'

    if os.path.exists(cnf_path):
        with open(cnf_path, 'r', encoding='utf-8') as configfile:
            config.read_file(configfile)
        
        if 'commands' in config:
            return config['commands']
        else:
            print("Err: Không tìm thấy phần 'commands' trong tệp cnf.ini")
            return {}
    else:
        print(f"Err: Không tìm thấy tệp cnf.ini tại {cnf_path}")
        return {}

def is_valid_name(name, type_value):
    """Kiểm tra tên hợp lệ dựa trên type và định dạng tên"""
    # Kiểm tra các ký tự hợp lệ cho tên bao gồm dấu -
    if type_value == '1':
        return re.match(r'^[a-zA-Z0-9\-_]+ -[a-zA-Z0-9]+\"chữ\"$', name) is not None
    else:
        return re.match(r'^[a-zA-Z0-9\-_]+$', name) is not None

def parse_xml(file_path):
    """Đọc file XML và trả về Name, Description, đường dẫn file .bat và Type"""
    tree = ET.parse(file_path)
    root = tree.getroot()

    name = root.find('Name').text if root.find('Name') is not None else 'N/A'
    description = root.find('Description').text if root.find('Description') is not None else 'N/A'
    dat_path = root.find('DatFilePath').text if root.find('DatFilePath') is not None else 'N/A'
    type_value = root.find('Type').text if root.find('Type') is not None else '0'

    dat_path = os.path.join(r'C:\Windows\Software\QORE\cmd', dat_path)  # Đường dẫn tuyệt đối tới 'cmd'
    
    return name, description, dat_path, type_value

def get_names_from_xml_folder():
    """Duyệt qua các file XML trong thư mục 'XML' và trả về danh sách các tên từ thẻ 'Name'"""
    xml_folder = r'C:\Windows\Software\QORE\XML'
    names = {}

    if not os.path.exists(xml_folder):
        print(f"Err: Thư mục {xml_folder} không tồn tại.")
        return names

    # Đọc danh sách các tệp XML được tìm thấy trong thư mục
    for xml_file in os.listdir(xml_folder):
        if xml_file.endswith('.xml'):
            file_path = os.path.join(xml_folder, xml_file)
            try:
                name, description, dat_path, type_value = parse_xml(file_path)
                # Chỉ thêm tên nếu hợp lệ
                if is_valid_name(name, type_value):
                    valid_name = name.lower().replace(' ', '_')
                    names[valid_name] = (description, dat_path, type_value)
                else:
                    print(f"Err: Tham số '{name}' không hợp lệ, bỏ qua file {xml_file}.")
            except Exception as e:
                print(f"Err: Không thể xử lý tệp XML: {e}")
    return names

def run_bat_from_name(dat_file, type_value):
    """Thực thi file .bat tương ứng với tên đã chọn, thêm 'chữ' nếu type là 1"""
    full_path = os.path.abspath(dat_file)
    
    if os.path.exists(full_path):
        if type_value == '1':
            os.system(f'call {full_path} "chữ"')
        else:
            os.system(f'call {full_path}')
    else:
        print(f"Err: File .bat {full_path} không tồn tại.")

def print_command_help(names_from_xml, command_descriptions):
    """In ra danh sách tất cả các lệnh từ XML và cnf.ini"""
    print("Options (and corresponding environment variables):")
    
    # In các lệnh từ cnf.ini
    for command, description in command_descriptions.items():
        print(f"-{command}: {description}")

    # In các lệnh từ XML
    for name, (description, _, type_value) in names_from_xml.items():
        print(f"-{name}: {description} (Type: {type_value})")

def main():
    command_descriptions = load_command_descriptions()
    names_from_xml = get_names_from_xml_folder()

    parser = argparse.ArgumentParser(description="QORE - Ứng dụng CLI cho quản lý và tự động hóa tác vụ.")
    
    parser.add_argument('-version', action='version', version='App 1.0')
    parser.add_argument('-list', action='store_true', help="Duyệt và in thông tin từ các file XML")
    
    args = parser.parse_args()

    # In ra danh sách các lệnh từ XML và cnf.ini
    if args.list:
        print_command_help(names_from_xml, command_descriptions)

if __name__ == '__main__':
    main()
